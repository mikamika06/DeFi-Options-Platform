#!/bin/bash

# –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π DeFi Options Platform
echo "üß™ –ü–û–í–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø DEFI OPTIONS PLATFORM"
echo "========================================"
echo ""

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∏
ANVIL_RPC="http://localhost:8545"
GRAPHQL_API="http://localhost:4000"
FRONTEND_URL="http://localhost:3001"
ADMIN_ACCOUNT="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
OPTIONS_MARKET="0xc6e7DF5E7b4f2A278906862b61205850344D4e7d"
USDC_TOKEN="0x610178dA211FEF7D417bC0e6FeD39F05609AD788"
WETH_TOKEN="0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e"
WORKING_SERIES="0x75dc6672695dbed160e4dd0605c3e5f5027c0fa5147feced2267c79e5ffbf127"

echo "üîß –¢–ï–°–¢ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏"
echo "-----------------------------------"

# 1.1 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Anvil
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é Anvil blockchain..."
CHAIN_ID=$(curl -s -X POST $ANVIL_RPC -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' | jq -r '.result')
if [ "$CHAIN_ID" = "0x7a69" ]; then
    log_success "Anvil –ø—Ä–∞—Ü—é—î (Chain ID: 31337)"
else
    log_error "Anvil –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chain ID: $CHAIN_ID"
    exit 1
fi

# 1.2 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GraphQL API
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é GraphQL API..."
API_STATUS=$(curl -s $GRAPHQL_API/health | jq -r '.status' 2>/dev/null)
if [ "$API_STATUS" = "ok" ]; then
    log_success "GraphQL API –ø—Ä–∞—Ü—é—î"
else
    log_error "GraphQL API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    exit 1
fi

# 1.3 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Frontend
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é Frontend..."
FRONTEND_STATUS=$(curl -s -I $FRONTEND_URL | head -1 | grep "200" || echo "")
if [ ! -z "$FRONTEND_STATUS" ]; then
    log_success "Frontend –¥–æ—Å—Ç—É–ø–Ω–∏–π"
else
    log_warning "Frontend –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
fi

echo ""
echo "üí∞ –¢–ï–°–¢ 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ —Ç–∞ –±–∞–ª–∞–Ω—Å—ñ–≤"
echo "---------------------------------------"

# 2.1 –ë–∞–ª–∞–Ω—Å ETH
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é ETH –±–∞–ª–∞–Ω—Å..."
ETH_BALANCE=$(cast balance $ADMIN_ACCOUNT --rpc-url $ANVIL_RPC)
ETH_FORMATTED=$(echo "scale=4; $ETH_BALANCE / 1000000000000000000" | bc -l)
log_success "ETH –±–∞–ª–∞–Ω—Å: $ETH_FORMATTED ETH"

# 2.2 –ë–∞–ª–∞–Ω—Å USDC
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é USDC –±–∞–ª–∞–Ω—Å..."
USDC_BALANCE=$(cast call $USDC_TOKEN "balanceOf(address)(uint256)" $ADMIN_ACCOUNT --rpc-url $ANVIL_RPC)
USDC_FORMATTED=$(echo "scale=2; $USDC_BALANCE / 1000000" | bc -l)
log_success "USDC –±–∞–ª–∞–Ω—Å: $USDC_FORMATTED USDC"

# 2.3 –ë–∞–ª–∞–Ω—Å WETH
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é WETH –±–∞–ª–∞–Ω—Å..."
WETH_BALANCE=$(cast call $WETH_TOKEN "balanceOf(address)(uint256)" $ADMIN_ACCOUNT --rpc-url $ANVIL_RPC)
WETH_FORMATTED=$(echo "scale=2; $WETH_BALANCE / 1000000000000000000" | bc -l)
log_success "WETH –±–∞–ª–∞–Ω—Å: $WETH_FORMATTED WETH"

echo ""
echo "üìä –¢–ï–°–¢ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä—ñ–π –æ–ø—Ü—ñ–π"
echo "-------------------------------"

# 3.1 GraphQL —Å–µ—Ä—ñ—ó
log_info "–û—Ç—Ä–∏–º—É—é —Å–µ—Ä—ñ—ó –∑ GraphQL..."
GRAPHQL_SERIES=$(curl -s -X POST "$GRAPHQL_API/graphql" -H "Content-Type: application/json" -d '{"query": "query { series { id optionType strikeWad expiry } }"}' | jq '.data.series | length')
log_success "GraphQL –ø–æ–≤–µ—Ä—Ç–∞—î $GRAPHQL_SERIES —Å–µ—Ä—ñ–π"

# 3.2 –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ñ —Å–µ—Ä—ñ—ó
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å–µ—Ä—ñ—ó –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ..."
CONTRACT_SERIES=$(cast call $OPTIONS_MARKET "listSeriesIds()(bytes32[])" --rpc-url $ANVIL_RPC | jq '. | length')
log_success "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–∞—î $CONTRACT_SERIES —Å–µ—Ä—ñ–π"

# 3.3 –¢–µ—Å—Ç –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è
log_info "–¢–µ—Å—Ç—É—é –∫–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –æ–ø—Ü—ñ—ó..."
QUOTE_RESULT=$(cast call $OPTIONS_MARKET "quote(bytes32,uint256)(uint256,uint256)" $WORKING_SERIES 100000000000000000 --rpc-url $ANVIL_RPC)
PREMIUM=$(echo $QUOTE_RESULT | cut -d' ' -f1)
FEE=$(echo $QUOTE_RESULT | cut -d' ' -f2)
PREMIUM_USDC=$(echo "scale=2; $PREMIUM / 1000000" | bc -l)
FEE_USDC=$(echo "scale=2; $FEE / 1000000" | bc -l)
log_success "Quote: Premium $PREMIUM_USDC USDC, Fee $FEE_USDC USDC"

echo ""
echo "üîê –¢–ï–°–¢ 4: Approve –æ–ø–µ—Ä–∞—Ü—ñ—ó"
echo "--------------------------"

# 4.1 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ allowance
log_info "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ—Ç–æ—á–Ω–∏–π allowance..."
CURRENT_ALLOWANCE=$(cast call $USDC_TOKEN "allowance(address,address)(uint256)" $ADMIN_ACCOUNT $OPTIONS_MARKET --rpc-url $ANVIL_RPC)
ALLOWANCE_USDC=$(echo "scale=2; $CURRENT_ALLOWANCE / 1000000" | bc -l)
log_info "–ü–æ—Ç–æ—á–Ω–∏–π allowance: $ALLOWANCE_USDC USDC"

# 4.2 –î–æ–¥–∞—Ç–∫–æ–≤–∏–π approve —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
if [ $(echo "$CURRENT_ALLOWANCE < 500000000" | bc) -eq 1 ]; then
    log_info "–í–∏–∫–æ–Ω—É—é –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π approve..."
    cast send $USDC_TOKEN "approve(address,uint256)" $OPTIONS_MARKET 1000000000 --private-key $PRIVATE_KEY --rpc-url $ANVIL_RPC > /dev/null
    NEW_ALLOWANCE=$(cast call $USDC_TOKEN "allowance(address,address)(uint256)" $ADMIN_ACCOUNT $OPTIONS_MARKET --rpc-url $ANVIL_RPC)
    NEW_ALLOWANCE_USDC=$(echo "scale=2; $NEW_ALLOWANCE / 1000000" | bc -l)
    log_success "–ù–æ–≤–∏–π allowance: $NEW_ALLOWANCE_USDC USDC"
else
    log_success "Allowance –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"
fi

echo ""
echo "üí∏ –¢–ï–°–¢ 5: –¢–æ—Ä–≥—ñ–≤–ª—è –æ–ø—Ü—ñ—è–º–∏"
echo "---------------------------"

# 5.1 –ë–∞–ª–∞–Ω—Å–∏ –¥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
USDC_BEFORE=$(cast call $USDC_TOKEN "balanceOf(address)(uint256)" $ADMIN_ACCOUNT --rpc-url $ANVIL_RPC)
log_info "USDC –¥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ: $(echo "scale=2; $USDC_BEFORE / 1000000" | bc -l) USDC"

# 5.2 –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
log_info "–í–∏–∫–æ–Ω—É—é —Ç–æ—Ä–≥—ñ–≤–ª—é –æ–ø—Ü—ñ—î—é..."
TRADE_TX=$(cast send $OPTIONS_MARKET "trade(bytes32,uint256,uint256)" $WORKING_SERIES 100000000000000000 200000000 --private-key $PRIVATE_KEY --rpc-url $ANVIL_RPC | grep "transactionHash" | awk '{print $2}')

if [ ! -z "$TRADE_TX" ]; then
    log_success "–¢–æ—Ä–≥—ñ–≤–ª—è —É—Å–ø—ñ—à–Ω–∞! TX: $TRADE_TX"
    
    # 5.3 –ë–∞–ª–∞–Ω—Å–∏ –ø—ñ—Å–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    sleep 2
    USDC_AFTER=$(cast call $USDC_TOKEN "balanceOf(address)(uint256)" $ADMIN_ACCOUNT --rpc-url $ANVIL_RPC)
    USDC_SPENT=$(echo "$USDC_BEFORE - $USDC_AFTER" | bc)
    USDC_SPENT_FORMATTED=$(echo "scale=2; $USDC_SPENT / 1000000" | bc -l)
    log_success "–í–∏—Ç—Ä–∞—á–µ–Ω–æ: $USDC_SPENT_FORMATTED USDC"
else
    log_error "–ü–æ–º–∏–ª–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ"
fi

echo ""
echo "üè™ –¢–ï–°–¢ 6: Frontend endpoints"
echo "----------------------------"

# 6.1 –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
log_info "–¢–µ—Å—Ç—É—é –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É..."
curl -s $FRONTEND_URL > /dev/null && log_success "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞" || log_error "–ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"

# 6.2 –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
log_info "–¢–µ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É..."
curl -s $FRONTEND_URL/test > /dev/null && log_success "–¢–µ—Å—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞" || log_error "–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"

# 6.3 –ü—É–ª–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
log_info "–¢–µ—Å—Ç—É—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—É–ª—ñ–≤..."
curl -s $FRONTEND_URL/pools > /dev/null && log_success "–°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—É–ª—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞" || log_error "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—É–ª—ñ–≤"

# 6.4 –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è
log_info "–¢–µ—Å—Ç—É—é –∞–¥–º—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É..."
curl -s $FRONTEND_URL/admin > /dev/null && log_success "–ê–¥–º—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞" || log_error "–ü–æ–º–∏–ª–∫–∞ –∞–¥–º—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏"

echo ""
echo "üì° –¢–ï–°–¢ 7: GraphQL –∑–∞–ø–∏—Ç–∏"
echo "-------------------------"

# 7.1 –ó–∞–ø–∏—Ç —Å–µ—Ä—ñ–π
log_info "–¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç —Å–µ—Ä—ñ–π..."
SERIES_RESPONSE=$(curl -s -X POST "$GRAPHQL_API/graphql" -H "Content-Type: application/json" -d '{"query": "query { series { id optionType } }"}')
SERIES_COUNT=$(echo $SERIES_RESPONSE | jq '.data.series | length' 2>/dev/null)
if [ "$SERIES_COUNT" -gt 0 ]; then
    log_success "–ó–∞–ø–∏—Ç —Å–µ—Ä—ñ–π –ø—Ä–∞—Ü—é—î ($SERIES_COUNT —Å–µ—Ä—ñ–π)"
else
    log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Å–µ—Ä—ñ–π"
fi

# 7.2 –ó–∞–ø–∏—Ç –∞–∫—Ç–∏–≤—ñ–≤
log_info "–¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç –∞–∫—Ç–∏–≤—ñ–≤..."
ASSETS_RESPONSE=$(curl -s -X POST "$GRAPHQL_API/graphql" -H "Content-Type: application/json" -d '{"query": "query { assets { symbol } }"}')
ASSETS_COUNT=$(echo $ASSETS_RESPONSE | jq '.data.assets | length' 2>/dev/null)
if [ "$ASSETS_COUNT" -gt 0 ]; then
    log_success "–ó–∞–ø–∏—Ç –∞–∫—Ç–∏–≤—ñ–≤ –ø—Ä–∞—Ü—é—î ($ASSETS_COUNT –∞–∫—Ç–∏–≤—ñ–≤)"
else
    log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –∞–∫—Ç–∏–≤—ñ–≤"
fi

echo ""
echo "üéØ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø"
echo "======================"
log_success "‚úÖ –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞—Ü—é—î"
log_success "‚úÖ –¢–æ–∫–µ–Ω–∏ —Ç–∞ –±–∞–ª–∞–Ω—Å–∏ –≤ –ø–æ—Ä—è–¥–∫—É"  
log_success "‚úÖ –°–µ—Ä—ñ—ó –æ–ø—Ü—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ"
log_success "‚úÖ Approve –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å"
log_success "‚úÖ –¢–æ—Ä–≥—ñ–≤–ª—è –æ–ø—Ü—ñ—è–º–∏ —É—Å–ø—ñ—à–Ω–∞"
log_success "‚úÖ Frontend endpoints –¥–æ—Å—Ç—É–ø–Ω—ñ"
log_success "‚úÖ GraphQL API —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"

echo ""
log_info "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –º–∞–Ω—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
echo "   üìä Dashboard: $FRONTEND_URL"
echo "   üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç: $FRONTEND_URL/test"  
echo "   üíß –ü—É–ª–∏: $FRONTEND_URL/pools"
echo "   ‚öôÔ∏è  –ê–¥–º—ñ–Ω: $FRONTEND_URL/admin"

echo ""
log_success "üéâ –í–°–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!"